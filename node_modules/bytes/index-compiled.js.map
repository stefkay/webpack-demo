{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/*!\n * bytes\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * Copyright(c) 2015 Jed Watson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = bytes;\nmodule.exports.format = format;\nmodule.exports.parse = parse;\n\n/**\n * Module variables.\n * @private\n */\n\nvar formatThousandsRegExp = /\\B(?=(\\d{3})+(?!\\d))/g;\n\nvar formatDecimalsRegExp = /(?:\\.0*|(\\.[^0]+)0+)$/;\n\nvar map = {\n  b:  1,\n  kb: 1 << 10,\n  mb: 1 << 20,\n  gb: 1 << 30,\n  tb: ((1 << 30) * 1024)\n};\n\n// TODO: use is-finite module?\nvar numberIsFinite = Number.isFinite || function (v) { return typeof v === 'number' && isFinite(v); };\n\nvar parseRegExp = /^((-|\\+)?(\\d+(?:\\.\\d+)?)) *(kb|mb|gb|tb)$/i;\n\n/**\n * Convert the given value in bytes into a string or parse to string to an integer in bytes.\n *\n * @param {string|number} value\n * @param {{\n *  case: [string],\n *  decimalPlaces: [number]\n *  fixedDecimals: [boolean]\n *  thousandsSeparator: [string]\n *  }} [options] bytes options.\n *\n * @returns {string|number|null}\n */\n\nfunction bytes(value, options) {\n  if (typeof value === 'string') {\n    return parse(value);\n  }\n\n  if (typeof value === 'number') {\n    return format(value, options);\n  }\n\n  return null;\n}\n\n/**\n * Format the given value in bytes into a string.\n *\n * If the value is negative, it is kept as such. If it is a float,\n * it is rounded.\n *\n * @param {number} value\n * @param {object} [options]\n * @param {number} [options.decimalPlaces=2]\n * @param {number} [options.fixedDecimals=false]\n * @param {string} [options.thousandsSeparator=]\n *\n * @returns {string|null}\n * @public\n */\n\nfunction format(value, options) {\n  if (!numberIsFinite(value)) {\n    return null;\n  }\n\n  var mag = Math.abs(value);\n  var thousandsSeparator = (options && options.thousandsSeparator) || '';\n  var decimalPlaces = (options && options.decimalPlaces !== undefined) ? options.decimalPlaces : 2;\n  var fixedDecimals = Boolean(options && options.fixedDecimals);\n  var unit = 'B';\n\n  if (mag >= map.tb) {\n    unit = 'TB';\n  } else if (mag >= map.gb) {\n    unit = 'GB';\n  } else if (mag >= map.mb) {\n    unit = 'MB';\n  } else if (mag >= map.kb) {\n    unit = 'kB';\n  }\n\n  var val = value / map[unit.toLowerCase()];\n  var str = val.toFixed(decimalPlaces);\n\n  if (!fixedDecimals) {\n    str = str.replace(formatDecimalsRegExp, '$1');\n  }\n\n  if (thousandsSeparator) {\n    str = str.replace(formatThousandsRegExp, thousandsSeparator);\n  }\n\n  return str + unit;\n}\n\n/**\n * Parse the string value into an integer in bytes.\n *\n * If no unit is given, it is assumed the value is in bytes.\n *\n * @param {number|string} val\n *\n * @returns {number|null}\n * @public\n */\n\nfunction parse(val) {\n  if (typeof val === 'number' && !isNaN(val)) {\n    return val;\n  }\n\n  if (typeof val !== 'string') {\n    return null;\n  }\n\n  // Test if the string passed is valid\n  var results = parseRegExp.exec(val);\n  var floatValue;\n  var unit = 'b';\n\n  if (!results) {\n    // Nothing could be extracted from the given string\n    floatValue = parseInt(val, 10);\n    unit = 'b'\n  } else {\n    // Retrieve the value and the unit\n    floatValue = parseFloat(results[1]);\n    unit = results[4].toLowerCase();\n  }\n\n  return Math.floor(map[unit] * floatValue);\n}\n"]}