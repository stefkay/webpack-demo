{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/**\n * Expose `pathtoRegexp`.\n */\n\nmodule.exports = pathtoRegexp;\n\n/**\n * Match matching groups in a regular expression.\n */\nvar MATCHING_GROUP_REGEXP = /\\((?!\\?)/g;\n\n/**\n * Normalize the given path string,\n * returning a regular expression.\n *\n * An empty array should be passed,\n * which will contain the placeholder\n * key names. For example \"/user/:id\" will\n * then contain [\"id\"].\n *\n * @param  {String|RegExp|Array} path\n * @param  {Array} keys\n * @param  {Object} options\n * @return {RegExp}\n * @api private\n */\n\nfunction pathtoRegexp(path, keys, options) {\n  options = options || {};\n  keys = keys || [];\n  var strict = options.strict;\n  var end = options.end !== false;\n  var flags = options.sensitive ? '' : 'i';\n  var extraOffset = 0;\n  var keysOffset = keys.length;\n  var i = 0;\n  var name = 0;\n  var m;\n\n  if (path instanceof RegExp) {\n    while (m = MATCHING_GROUP_REGEXP.exec(path.source)) {\n      keys.push({\n        name: name++,\n        optional: false,\n        offset: m.index\n      });\n    }\n\n    return path;\n  }\n\n  if (Array.isArray(path)) {\n    // Map array parts into regexps and return their source. We also pass\n    // the same keys and options instance into every generation to get\n    // consistent matching groups before we join the sources together.\n    path = path.map(function (value) {\n      return pathtoRegexp(value, keys, options).source;\n    });\n\n    return new RegExp('(?:' + path.join('|') + ')', flags);\n  }\n\n  path = ('^' + path + (strict ? '' : path[path.length - 1] === '/' ? '?' : '/?'))\n    .replace(/\\/\\(/g, '/(?:')\n    .replace(/([\\/\\.])/g, '\\\\$1')\n    .replace(/(\\\\\\/)?(\\\\\\.)?:(\\w+)(\\(.*?\\))?(\\*)?(\\?)?/g, function (match, slash, format, key, capture, star, optional, offset) {\n      slash = slash || '';\n      format = format || '';\n      capture = capture || '([^\\\\/' + format + ']+?)';\n      optional = optional || '';\n\n      keys.push({\n        name: key,\n        optional: !!optional,\n        offset: offset + extraOffset\n      });\n\n      var result = ''\n        + (optional ? '' : slash)\n        + '(?:'\n        + format + (optional ? slash : '') + capture\n        + (star ? '((?:[\\\\/' + format + '].+?)?)' : '')\n        + ')'\n        + optional;\n\n      extraOffset += result.length - match.length;\n\n      return result;\n    })\n    .replace(/\\*/g, function (star, index) {\n      var len = keys.length\n\n      while (len-- > keysOffset && keys[len].offset > index) {\n        keys[len].offset += 3; // Replacement length minus asterisk length.\n      }\n\n      return '(.*)';\n    });\n\n  // This is a workaround for handling unnamed matching groups.\n  while (m = MATCHING_GROUP_REGEXP.exec(path)) {\n    var escapeCount = 0;\n    var index = m.index;\n\n    while (path.charAt(--index) === '\\\\') {\n      escapeCount++;\n    }\n\n    // It's possible to escape the bracket.\n    if (escapeCount % 2 === 1) {\n      continue;\n    }\n\n    if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) {\n      keys.splice(keysOffset + i, 0, {\n        name: name++, // Unnamed matching groups must be consistently linear.\n        optional: false,\n        offset: m.index\n      });\n    }\n\n    i++;\n  }\n\n  // If the path is non-ending, match until the end or a slash.\n  path += (end ? '$' : (path[path.length - 1] === '/' ? '' : '(?=\\\\/|$)'));\n\n  return new RegExp(path, flags);\n};\n"]}