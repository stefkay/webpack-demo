{"version":3,"sources":["index_test.js"],"names":[],"mappings":"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","file":"index_test-compiled.js","sourcesContent":["'use strict';\n\nvar sinon = require('sinon');\nvar historyApiFallback = require('../lib');\n\nvar tests = module.exports = {};\n\nvar middleware;\nvar req = null;\nvar requestedUrl;\nvar next;\n\ntests.setUp = function(done) {\n  middleware = historyApiFallback();\n  requestedUrl = '/foo';\n  req = {\n    method: 'GET',\n    url: requestedUrl,\n    headers: {\n      accept: 'text/html, */*'\n    }\n  };\n  next = sinon.stub();\n\n  done();\n};\n\n\n['POST', 'PUT', 'DELETE', 'HEAD', 'OPTIONS'].forEach(function(method) {\n  tests['should ignore ' + method + ' requests'] = function(test) {\n    req.method = method;\n\n    middleware(req, null, next);\n\n    test.equal(req.url, requestedUrl);\n    test.ok(next.called);\n    test.done();\n  };\n});\n\n\ntests['should ignore requests that do not accept html'] = function(test) {\n  req.headers.accept = 'application/json';\n\n  middleware(req, null, next);\n\n  test.equal(req.url, requestedUrl);\n  test.ok(next.called);\n  test.done();\n};\n\n\ntests['should ignore file requests'] = function(test) {\n  var expected = req.url = 'js/app.js';\n\n  middleware(req, null, next);\n\n  test.equal(req.url, expected);\n  test.ok(next.called);\n  test.done();\n};\n\n\ntests['should take JSON preference into account'] = function(test) {\n  req.headers.accept = 'application/json, text/plain, */*';\n\n  middleware(req, null, next);\n\n  test.equal(req.url, requestedUrl);\n  test.ok(next.called);\n  test.done();\n};\n\n\ntests['should rewrite valid requests'] = function(test) {\n  middleware(req, null, next);\n\n  test.equal(req.url, '/index.html');\n  test.ok(next.called);\n  test.done();\n};\n\ntests['should not fail for missing HTTP accept header'] = function(test) {\n  delete req.headers.accept;\n\n  middleware(req, null, next);\n\n  test.equal(req.url, requestedUrl);\n  test.ok(next.called);\n  test.done();\n};\n\ntests['should not fail for missing headers object'] = function(test) {\n  delete req.headers;\n\n  middleware(req, null, next);\n\n  test.equal(req.url, requestedUrl);\n  test.ok(next.called);\n  test.done();\n};\n\ntests['should work in verbose mode'] = function(test) {\n  var expected = req.url = 'js/app.js';\n  middleware = historyApiFallback({\n    verbose: true\n  });\n\n  middleware(req, null, next);\n\n  test.equal(req.url, expected);\n  test.ok(next.called);\n  test.done();\n};\n\ntests['should work with a custom logger'] = function(test) {\n  var expected = req.url = 'js/app.js';\n  var logger = sinon.stub();\n  middleware = historyApiFallback({\n    logger: logger\n  });\n\n  middleware(req, null, next);\n\n  test.equal(req.url, expected);\n  test.ok(next.called);\n  test.ok(logger.calledOnce);\n  test.done();\n};\n\ntests['should rewrite requested path according to rules'] = function(test) {\n  req.url = '/soccer';\n  middleware = historyApiFallback({\n    rewrites: [\n      {from: /\\/soccer/, to: '/soccer.html'}\n    ]\n  });\n\n  middleware(req, null, next);\n\n  test.equal(req.url, '/soccer.html');\n  test.ok(next.called);\n  test.done();\n};\n\ntests['should support functions as rewrite rule'] = function(test) {\n  middleware = historyApiFallback({\n    rewrites: [\n      {\n        from: /^\\/libs\\/(.*)$/,\n        to: function(context) {\n          return './bower_components' + context.parsedUrl.pathname;\n        }\n      }\n    ]\n  });\n\n  req.url = '/libs/jquery/jquery.1.12.0.min.js';\n  middleware(req, null, next);\n  test.equal(req.url, './bower_components/libs/jquery/jquery.1.12.0.min.js');\n  test.ok(next.called);\n\n  next = sinon.stub();\n  var expected = req.url = '/js/main.js';\n  middleware(req, null, next);\n  test.equal(req.url, expected);\n  test.ok(next.called);\n\n  test.done();\n};\n\ntests['should test rewrite rules'] = function(test) {\n  req.url = '/socer';\n  middleware = historyApiFallback({\n    rewrites: [\n      {from: /\\/soccer/, to: '/soccer.html'}\n    ]\n  });\n\n  middleware(req, null, next);\n\n  test.equal(req.url, '/index.html');\n  test.ok(next.called);\n  test.done();\n};\n\ntests['should support custom index file'] = function(test) {\n  var index = 'default.html';\n  req.url = '/socer';\n  middleware = historyApiFallback({\n    index: index\n  });\n\n  middleware(req, null, next);\n\n  test.equal(req.url, index);\n  test.ok(next.called);\n  test.done();\n};\n"]}