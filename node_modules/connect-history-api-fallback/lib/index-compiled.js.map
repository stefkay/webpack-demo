{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["'use strict';\n\nvar url = require('url');\n\nexports = module.exports = function historyApiFallback(options) {\n  options = options || {};\n  var logger = getLogger(options);\n\n  return function(req, res, next) {\n    var headers = req.headers;\n    if (req.method !== 'GET') {\n      logger(\n        'Not rewriting',\n        req.method,\n        req.url,\n        'because the method is not GET.'\n      );\n      return next();\n    } else if (!headers || typeof headers.accept !== 'string') {\n      logger(\n        'Not rewriting',\n        req.method,\n        req.url,\n        'because the client did not send an HTTP accept header.'\n      );\n      return next();\n    } else if (headers.accept.indexOf('application/json') === 0) {\n      logger(\n        'Not rewriting',\n        req.method,\n        req.url,\n        'because the client prefers JSON.'\n      );\n      return next();\n    } else if (!acceptsHtml(headers.accept)) {\n      logger(\n        'Not rewriting',\n        req.method,\n        req.url,\n        'because the client does not accept HTML.'\n      );\n      return next();\n    }\n\n    var parsedUrl = url.parse(req.url);\n    var rewriteTarget;\n    options.rewrites = options.rewrites || [];\n    for (var i = 0; i < options.rewrites.length; i++) {\n      var rewrite = options.rewrites[i];\n      var match = parsedUrl.pathname.match(rewrite.from);\n      if (match !== null) {\n        rewriteTarget = evaluateRewriteRule(parsedUrl, match, rewrite.to);\n        logger('Rewriting', req.method, req.url, 'to', rewriteTarget);\n        req.url = rewriteTarget;\n        return next();\n      }\n    }\n\n    if (parsedUrl.pathname.indexOf('.') !== -1) {\n      logger(\n        'Not rewriting',\n        req.method,\n        req.url,\n        'because the path includes a dot (.) character.'\n      );\n      return next();\n    }\n\n    rewriteTarget = options.index || '/index.html';\n    logger('Rewriting', req.method, req.url, 'to', rewriteTarget);\n    req.url = rewriteTarget;\n    next();\n  };\n};\n\nfunction evaluateRewriteRule(parsedUrl, match, rule) {\n  if (typeof rule === 'string') {\n    return rule;\n  } else if (typeof rule !== 'function') {\n    throw new Error('Rewrite rule can only be of type string of function.');\n  }\n\n  return rule({\n    parsedUrl: parsedUrl,\n    match: match\n  });\n}\n\nfunction acceptsHtml(header) {\n  return header.indexOf('text/html') !== -1 || header.indexOf('*/*') !== -1;\n}\n\nfunction getLogger(options) {\n  if (options && options.logger) {\n    return options.logger;\n  } else if (options && options.verbose) {\n    return console.log.bind(console);\n  }\n  return function(){};\n}\n"]}