{"version":3,"sources":["cell.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,UAAU,QAAQ,WAAR,CAAd;AAAA,IACI,SAAU,QAAQ,UAAR,CADd;;AAGA,IAAI,OAAO,UAAS,KAAT,EAAgB;AACzB,OAAK,IAAL,GAAgB,MAAM,CAAN,CAAhB;AACA,OAAK,QAAL,GAAgB,MAAM,CAAN,CAAhB;;AAEA,OAAK,SAAL,GAAiB;AACf,cAAU,IAAI,OAAJ,CAAY,KAAK,QAAjB,EAA2B,wBAA3B,CADK;AAEf,cAAU,IAAI,OAAJ,CAAY,KAAK,QAAjB,EAA2B,wBAA3B;AAFK,GAAjB;AAID,CARD;;AAUA,KAAK,SAAL,CAAe,OAAf,GAAyB,UAAS,SAAT,EAAoB;AAC3C,OAAK,SAAL,CAAe,SAAf,EAA0B,OAA1B,IAAqC,CAArC;AACD,CAFD;;AAIA,KAAK,SAAL,CAAe,QAAf,GAA0B,UAAS,KAAT,EAAgB,OAAhB,EAAyB,QAAzB,EAAmC,OAAnC,EAA4C;AACpE,OAAK,KAAL,CAAW,UAAX,EAAuB,KAAvB,EAA8B,OAA9B,EAAuC,QAAvC,EAAiD,OAAjD;AACD,CAFD;;AAIA,KAAK,SAAL,CAAe,QAAf,GAA0B,UAAS,KAAT,EAAgB,OAAhB,EAAyB,QAAzB,EAAmC,OAAnC,EAA4C;AACpE,OAAK,KAAL,CAAW,UAAX,EAAuB,KAAvB,EAA8B,OAA9B,EAAuC,QAAvC,EAAiD,OAAjD;AACD,CAFD;;AAIA,KAAK,SAAL,CAAe,KAAf,GAAuB,YAAW;AAChC,OAAK,OAAL,GAAe,KAAK,OAAL,IAAgB,IAAI,MAAJ,EAA/B;AACA,OAAK,QAAL;AACA,SAAO,KAAK,OAAZ;AACD,CAJD;;AAMA,KAAK,SAAL,CAAe,KAAf,GAAuB,UAAS,SAAT,EAAoB,KAApB,EAA2B,OAA3B,EAAoC,QAApC,EAA8C,OAA9C,EAAuD;AAC5E,OAAK,SAAL,CAAe,SAAf,EAA0B,IAA1B,CAA+B,KAA/B,EAAsC,OAAtC,EAA+C,UAAS,GAAT,EAAc,GAAd,EAAmB;AAChE,QAAI,GAAJ,EAAS,IAAI,OAAJ,GAAc,KAAK,IAAL,CAAU,IAAV,GAAiB,IAAjB,GAAwB,IAAI,OAA1C;AACT,aAAS,IAAT,CAAc,OAAd,EAAuB,GAAvB,EAA4B,GAA5B;AACA,SAAK,QAAL;AACD,GAJD,EAIG,IAJH;AAKD,CAND;;AAQA,KAAK,SAAL,CAAe,QAAf,GAA0B,YAAW;AACnC,MAAI,MAAO,KAAK,SAAL,CAAe,QAA1B;AAAA,MACI,OAAO,KAAK,SAAL,CAAe,QAD1B;;AAGA,MAAI,CAAC,KAAK,OAAN,IAAiB,IAAI,OAAJ,GAAc,KAAK,OAAnB,KAA+B,CAApD,EAAuD;AACvD,MAAI,KAAK,QAAT,EAAmB,KAAK,QAAL,CAAc,KAAd;AACnB,OAAK,QAAL,GAAgB,IAAhB;AACA,OAAK,OAAL,CAAa,IAAb;AACD,CARD;;AAUA,OAAO,OAAP,GAAiB,IAAjB","file":"cell-compiled.js","sourcesContent":["'use strict';\n\nvar Functor = require('./functor'),\n    Pledge  = require('./pledge');\n\nvar Cell = function(tuple) {\n  this._ext     = tuple[0];\n  this._session = tuple[1];\n\n  this._functors = {\n    incoming: new Functor(this._session, 'processIncomingMessage'),\n    outgoing: new Functor(this._session, 'processOutgoingMessage')\n  };\n};\n\nCell.prototype.pending = function(direction) {\n  this._functors[direction].pending += 1;\n};\n\nCell.prototype.incoming = function(error, message, callback, context) {\n  this._exec('incoming', error, message, callback, context);\n};\n\nCell.prototype.outgoing = function(error, message, callback, context) {\n  this._exec('outgoing', error, message, callback, context);\n};\n\nCell.prototype.close = function() {\n  this._closed = this._closed || new Pledge();\n  this._doClose();\n  return this._closed;\n};\n\nCell.prototype._exec = function(direction, error, message, callback, context) {\n  this._functors[direction].call(error, message, function(err, msg) {\n    if (err) err.message = this._ext.name + ': ' + err.message;\n    callback.call(context, err, msg);\n    this._doClose();\n  }, this);\n};\n\nCell.prototype._doClose = function() {\n  var fin  = this._functors.incoming,\n      fout = this._functors.outgoing;\n\n  if (!this._closed || fin.pending + fout.pending !== 0) return;\n  if (this._session) this._session.close();\n  this._session = null;\n  this._closed.done();\n};\n\nmodule.exports = Cell;\n"]}