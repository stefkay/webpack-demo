{"version":3,"sources":["lolcation.js"],"names":[],"mappings":"AAAA;;AAEA;;;;;;;;;AAQA,IAAI,SAAS,EAAE,MAAM,CAAR,EAAW,OAAO,CAAlB,EAAb;AAAA,IACI,GADJ;;AAGA;;;;;;;;;;;;AAYA,OAAO,OAAP,GAAiB,SAAS,SAAT,CAAmB,GAAnB,EAAwB;AACvC,QAAM,OAAO,OAAO,QAAd,IAA0B,EAAhC;AACA,QAAM,OAAO,QAAQ,IAAR,CAAb;;AAEA,MAAI,mBAAmB,EAAvB;AAAA,MACI,OAAO,OAAO,GADlB;AAAA,MAEI,GAFJ;;AAIA,MAAI,YAAY,IAAI,QAApB,EAA8B;AAC5B,uBAAmB,IAAI,GAAJ,CAAQ,SAAS,IAAI,QAAb,CAAR,EAAgC,EAAhC,CAAnB;AACD,GAFD,MAEO,IAAI,aAAa,IAAjB,EAAuB;AAC5B,uBAAmB,IAAI,GAAJ,CAAQ,GAAR,EAAa,EAAb,CAAnB;AACA,SAAK,GAAL,IAAY,MAAZ,EAAoB,OAAO,iBAAiB,GAAjB,CAAP;AACrB,GAHM,MAGA,IAAI,aAAa,IAAjB,EAAuB,KAAK,GAAL,IAAY,GAAZ,EAAiB;AAC7C,QAAI,OAAO,MAAX,EAAmB;AACnB,qBAAiB,GAAjB,IAAwB,IAAI,GAAJ,CAAxB;AACD;;AAED,SAAO,gBAAP;AACD,CAnBD","file":"lolcation-compiled.js","sourcesContent":["'use strict';\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as the a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 }\n  , URL;\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @api public\n */\nmodule.exports = function lolcation(loc) {\n  loc = loc || global.location || {};\n  URL = URL || require('./');\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new URL(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new URL(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) for (key in loc) {\n    if (key in ignore) continue;\n    finaldestination[key] = loc[key];\n  }\n\n  return finaldestination;\n};\n"]}