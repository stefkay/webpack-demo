{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;;;;;;AAMA;;AAEA;;;;;AAKA,OAAO,OAAP,GAAiB,MAAjB;;AAEA;;;;;AAKA,SAAS,oBAAT,CAA8B,MAA9B,EAAsC;AACpC,MAAI,YAAY,OAAO,SAAP,CAAiB,MAAjB,CAAhB;;AAEA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,UAAU,MAA9B,EAAsC,GAAtC,EAA2C;AACzC,QAAI,UAAU,CAAV,EAAa,IAAb,KAAsB,QAA1B,EAAoC;AAClC,aAAO,IAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD;;AAED;;;;;;;AAOA,SAAS,MAAT,CAAgB,MAAhB,EAAwB;AACtB,MAAI,CAAC,MAAL,EAAa;AACX,UAAM,IAAI,SAAJ,CAAc,6BAAd,CAAN;AACD;;AAED,MAAI,OAAO,OAAO,MAAd,KAAyB,UAA7B,EAAyC;AACvC;AACA,WAAO,MAAP;AACA;AACD;;AAED;AACA,MAAI,CAAC,qBAAqB,MAArB,CAAL,EAAmC;AACjC;AACD;;AAED,MAAI,QAAJ;AACA,MAAI,YAAY,OAAO,SAAP,CAAiB,OAAjB,CAAhB;;AAEA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,UAAU,MAA9B,EAAsC,GAAtC,EAA2C;AACzC,eAAW,UAAU,CAAV,CAAX;;AAEA,QAAI,SAAS,IAAT,KAAkB,SAAlB,IAA+B,SAAS,IAAT,KAAkB,SAArD,EAAgE;AAC9D;AACD;;AAED;AACA,aAAS,IAAT,CAAc,MAAd;AACD;AACF","file":"index-compiled.js","sourcesContent":["/*!\n * unpipe\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = unpipe\n\n/**\n * Determine if there are Node.js pipe-like data listeners.\n * @private\n */\n\nfunction hasPipeDataListeners(stream) {\n  var listeners = stream.listeners('data')\n\n  for (var i = 0; i < listeners.length; i++) {\n    if (listeners[i].name === 'ondata') {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Unpipe a stream from all destinations.\n *\n * @param {object} stream\n * @public\n */\n\nfunction unpipe(stream) {\n  if (!stream) {\n    throw new TypeError('argument stream is required')\n  }\n\n  if (typeof stream.unpipe === 'function') {\n    // new-style\n    stream.unpipe()\n    return\n  }\n\n  // Node.js 0.8 hack\n  if (!hasPipeDataListeners(stream)) {\n    return\n  }\n\n  var listener\n  var listeners = stream.listeners('close')\n\n  for (var i = 0; i < listeners.length; i++) {\n    listener = listeners[i]\n\n    if (listener.name !== 'cleanup' && listener.name !== 'onclose') {\n      continue\n    }\n\n    // invoke the listener\n    listener.call(stream)\n  }\n}\n"]}