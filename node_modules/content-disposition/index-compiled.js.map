{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/*!\n * content-disposition\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n */\n\nmodule.exports = contentDisposition\nmodule.exports.parse = parse\n\n/**\n * Module dependencies.\n */\n\nvar basename = require('path').basename\n\n/**\n * RegExp to match non attr-char, *after* encodeURIComponent (i.e. not including \"%\")\n */\n\nvar encodeUriAttrCharRegExp = /[\\x00-\\x20\"'\\(\\)*,\\/:;<=>?@\\[\\\\\\]\\{\\}\\x7f]/g\n\n/**\n * RegExp to match percent encoding escape.\n */\n\nvar hexEscapeRegExp = /%[0-9A-Fa-f]{2}/\nvar hexEscapeReplaceRegExp = /%([0-9A-Fa-f]{2})/g\n\n/**\n * RegExp to match non-latin1 characters.\n */\n\nvar nonLatin1RegExp = /[^\\x20-\\x7e\\xa0-\\xff]/g\n\n/**\n * RegExp to match quoted-pair in RFC 2616\n *\n * quoted-pair = \"\\\" CHAR\n * CHAR        = <any US-ASCII character (octets 0 - 127)>\n */\n\nvar qescRegExp = /\\\\([\\u0000-\\u007f])/g;\n\n/**\n * RegExp to match chars that must be quoted-pair in RFC 2616\n */\n\nvar quoteRegExp = /([\\\\\"])/g\n\n/**\n * RegExp for various RFC 2616 grammar\n *\n * parameter     = token \"=\" ( token | quoted-string )\n * token         = 1*<any CHAR except CTLs or separators>\n * separators    = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n *               | \",\" | \";\" | \":\" | \"\\\" | <\">\n *               | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n *               | \"{\" | \"}\" | SP | HT\n * quoted-string = ( <\"> *(qdtext | quoted-pair ) <\"> )\n * qdtext        = <any TEXT except <\">>\n * quoted-pair   = \"\\\" CHAR\n * CHAR          = <any US-ASCII character (octets 0 - 127)>\n * TEXT          = <any OCTET except CTLs, but including LWS>\n * LWS           = [CRLF] 1*( SP | HT )\n * CRLF          = CR LF\n * CR            = <US-ASCII CR, carriage return (13)>\n * LF            = <US-ASCII LF, linefeed (10)>\n * SP            = <US-ASCII SP, space (32)>\n * HT            = <US-ASCII HT, horizontal-tab (9)>\n * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>\n * OCTET         = <any 8-bit sequence of data>\n */\n\nvar paramRegExp = /; *([!#$%&'\\*\\+\\-\\.0-9A-Z\\^_`a-z\\|~]+) *= *(\"(?:[ !\\x23-\\x5b\\x5d-\\x7e\\x80-\\xff]|\\\\[\\x20-\\x7e])*\"|[!#$%&'\\*\\+\\-\\.0-9A-Z\\^_`a-z\\|~]+) */g\nvar textRegExp = /^[\\x20-\\x7e\\x80-\\xff]+$/\nvar tokenRegExp = /^[!#$%&'\\*\\+\\-\\.0-9A-Z\\^_`a-z\\|~]+$/\n\n/**\n * RegExp for various RFC 5987 grammar\n *\n * ext-value     = charset  \"'\" [ language ] \"'\" value-chars\n * charset       = \"UTF-8\" / \"ISO-8859-1\" / mime-charset\n * mime-charset  = 1*mime-charsetc\n * mime-charsetc = ALPHA / DIGIT\n *               / \"!\" / \"#\" / \"$\" / \"%\" / \"&\"\n *               / \"+\" / \"-\" / \"^\" / \"_\" / \"`\"\n *               / \"{\" / \"}\" / \"~\"\n * language      = ( 2*3ALPHA [ extlang ] )\n *               / 4ALPHA\n *               / 5*8ALPHA\n * extlang       = *3( \"-\" 3ALPHA )\n * value-chars   = *( pct-encoded / attr-char )\n * pct-encoded   = \"%\" HEXDIG HEXDIG\n * attr-char     = ALPHA / DIGIT\n *               / \"!\" / \"#\" / \"$\" / \"&\" / \"+\" / \"-\" / \".\"\n *               / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n */\n\nvar extValueRegExp = /^([A-Za-z0-9!#$%&+\\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+\\-\\.^_`|~])+)$/\n\n/**\n * RegExp for various RFC 6266 grammar\n *\n * disposition-type = \"inline\" | \"attachment\" | disp-ext-type\n * disp-ext-type    = token\n * disposition-parm = filename-parm | disp-ext-parm\n * filename-parm    = \"filename\" \"=\" value\n *                  | \"filename*\" \"=\" ext-value\n * disp-ext-parm    = token \"=\" value\n *                  | ext-token \"=\" ext-value\n * ext-token        = <the characters in token, followed by \"*\">\n */\n\nvar dispositionTypeRegExp = /^([!#$%&'\\*\\+\\-\\.0-9A-Z\\^_`a-z\\|~]+) *(?:$|;)/\n\n/**\n * Create an attachment Content-Disposition header.\n *\n * @param {string} [filename]\n * @param {object} [options]\n * @param {string} [options.type=attachment]\n * @param {string|boolean} [options.fallback=true]\n * @return {string}\n * @api public\n */\n\nfunction contentDisposition(filename, options) {\n  var opts = options || {}\n\n  // get type\n  var type = opts.type || 'attachment'\n\n  // get parameters\n  var params = createparams(filename, opts.fallback)\n\n  // format into string\n  return format(new ContentDisposition(type, params))\n}\n\n/**\n * Create parameters object from filename and fallback.\n *\n * @param {string} [filename]\n * @param {string|boolean} [fallback=true]\n * @return {object}\n * @api private\n */\n\nfunction createparams(filename, fallback) {\n  if (filename === undefined) {\n    return\n  }\n\n  var params = {}\n\n  if (typeof filename !== 'string') {\n    throw new TypeError('filename must be a string')\n  }\n\n  // fallback defaults to true\n  if (fallback === undefined) {\n    fallback = true\n  }\n\n  if (typeof fallback !== 'string' && typeof fallback !== 'boolean') {\n    throw new TypeError('fallback must be a string or boolean')\n  }\n\n  if (typeof fallback === 'string' && nonLatin1RegExp.test(fallback)) {\n    throw new TypeError('fallback must be ISO-8859-1 string')\n  }\n\n  // restrict to file base name\n  var name = basename(filename)\n\n  // determine if name is suitable for quoted string\n  var isQuotedString = textRegExp.test(name)\n\n  // generate fallback name\n  var fallbackName = typeof fallback !== 'string'\n    ? fallback && getlatin1(name)\n    : basename(fallback)\n  var hasFallback = typeof fallbackName === 'string' && fallbackName !== name\n\n  // set extended filename parameter\n  if (hasFallback || !isQuotedString || hexEscapeRegExp.test(name)) {\n    params['filename*'] = name\n  }\n\n  // set filename parameter\n  if (isQuotedString || hasFallback) {\n    params.filename = hasFallback\n      ? fallbackName\n      : name\n  }\n\n  return params\n}\n\n/**\n * Format object to Content-Disposition header.\n *\n * @param {object} obj\n * @param {string} obj.type\n * @param {object} [obj.parameters]\n * @return {string}\n * @api private\n */\n\nfunction format(obj) {\n  var parameters = obj.parameters\n  var type = obj.type\n\n  if (!type || typeof type !== 'string' || !tokenRegExp.test(type)) {\n    throw new TypeError('invalid type')\n  }\n\n  // start with normalized type\n  var string = String(type).toLowerCase()\n\n  // append parameters\n  if (parameters && typeof parameters === 'object') {\n    var param\n    var params = Object.keys(parameters).sort()\n\n    for (var i = 0; i < params.length; i++) {\n      param = params[i]\n\n      var val = param.substr(-1) === '*'\n        ? ustring(parameters[param])\n        : qstring(parameters[param])\n\n      string += '; ' + param + '=' + val\n    }\n  }\n\n  return string\n}\n\n/**\n * Decode a RFC 6987 field value (gracefully).\n *\n * @param {string} str\n * @return {string}\n * @api private\n */\n\nfunction decodefield(str) {\n  var match = extValueRegExp.exec(str)\n\n  if (!match) {\n    throw new TypeError('invalid extended field value')\n  }\n\n  var charset = match[1].toLowerCase()\n  var encoded = match[2]\n  var value\n\n  // to binary string\n  var binary = encoded.replace(hexEscapeReplaceRegExp, pdecode)\n\n  switch (charset) {\n    case 'iso-8859-1':\n      value = getlatin1(binary)\n      break\n    case 'utf-8':\n      value = new Buffer(binary, 'binary').toString('utf8')\n      break\n    default:\n      throw new TypeError('unsupported charset in extended field')\n  }\n\n  return value\n}\n\n/**\n * Get ISO-8859-1 version of string.\n *\n * @param {string} val\n * @return {string}\n * @api private\n */\n\nfunction getlatin1(val) {\n  // simple Unicode -> ISO-8859-1 transformation\n  return String(val).replace(nonLatin1RegExp, '?')\n}\n\n/**\n * Parse Content-Disposition header string.\n *\n * @param {string} string\n * @return {object}\n * @api private\n */\n\nfunction parse(string) {\n  if (!string || typeof string !== 'string') {\n    throw new TypeError('argument string is required')\n  }\n\n  var match = dispositionTypeRegExp.exec(string)\n\n  if (!match) {\n    throw new TypeError('invalid type format')\n  }\n\n  // normalize type\n  var index = match[0].length\n  var type = match[1].toLowerCase()\n\n  var key\n  var names = []\n  var params = {}\n  var value\n\n  // calculate index to start at\n  index = paramRegExp.lastIndex = match[0].substr(-1) === ';'\n    ? index - 1\n    : index\n\n  // match parameters\n  while (match = paramRegExp.exec(string)) {\n    if (match.index !== index) {\n      throw new TypeError('invalid parameter format')\n    }\n\n    index += match[0].length\n    key = match[1].toLowerCase()\n    value = match[2]\n\n    if (names.indexOf(key) !== -1) {\n      throw new TypeError('invalid duplicate parameter')\n    }\n\n    names.push(key)\n\n    if (key.indexOf('*') + 1 === key.length) {\n      // decode extended value\n      key = key.slice(0, -1)\n      value = decodefield(value)\n\n      // overwrite existing value\n      params[key] = value\n      continue\n    }\n\n    if (typeof params[key] === 'string') {\n      continue\n    }\n\n    if (value[0] === '\"') {\n      // remove quotes and escapes\n      value = value\n        .substr(1, value.length - 2)\n        .replace(qescRegExp, '$1')\n    }\n\n    params[key] = value\n  }\n\n  if (index !== -1 && index !== string.length) {\n    throw new TypeError('invalid parameter format')\n  }\n\n  return new ContentDisposition(type, params)\n}\n\n/**\n * Percent decode a single character.\n *\n * @param {string} str\n * @param {string} hex\n * @return {string}\n * @api private\n */\n\nfunction pdecode(str, hex) {\n  return String.fromCharCode(parseInt(hex, 16))\n}\n\n/**\n * Percent encode a single character.\n *\n * @param {string} char\n * @return {string}\n * @api private\n */\n\nfunction pencode(char) {\n  var hex = String(char)\n    .charCodeAt(0)\n    .toString(16)\n    .toUpperCase()\n  return hex.length === 1\n    ? '%0' + hex\n    : '%' + hex\n}\n\n/**\n * Quote a string for HTTP.\n *\n * @param {string} val\n * @return {string}\n * @api private\n */\n\nfunction qstring(val) {\n  var str = String(val)\n\n  return '\"' + str.replace(quoteRegExp, '\\\\$1') + '\"'\n}\n\n/**\n * Encode a Unicode string for HTTP (RFC 5987).\n *\n * @param {string} val\n * @return {string}\n * @api private\n */\n\nfunction ustring(val) {\n  var str = String(val)\n\n  // percent encode as UTF-8\n  var encoded = encodeURIComponent(str)\n    .replace(encodeUriAttrCharRegExp, pencode)\n\n  return 'UTF-8\\'\\'' + encoded\n}\n\n/**\n * Class for parsed Content-Disposition header for v8 optimization\n */\n\nfunction ContentDisposition(type, parameters) {\n  this.type = type\n  this.parameters = parameters\n}\n"]}