{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/*!\n * range-parser\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * Copyright(c) 2015-2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = rangeParser\n\n/**\n * Parse \"Range\" header `str` relative to the given file `size`.\n *\n * @param {Number} size\n * @param {String} str\n * @param {Object} [options]\n * @return {Array}\n * @public\n */\n\nfunction rangeParser (size, str, options) {\n  var index = str.indexOf('=')\n\n  if (index === -1) {\n    return -2\n  }\n\n  // split the range string\n  var arr = str.slice(index + 1).split(',')\n  var ranges = []\n\n  // add ranges type\n  ranges.type = str.slice(0, index)\n\n  // parse all ranges\n  for (var i = 0; i < arr.length; i++) {\n    var range = arr[i].split('-')\n    var start = parseInt(range[0], 10)\n    var end = parseInt(range[1], 10)\n\n    // -nnn\n    if (isNaN(start)) {\n      start = size - end\n      end = size - 1\n    // nnn-\n    } else if (isNaN(end)) {\n      end = size - 1\n    }\n\n    // limit last-byte-pos to current length\n    if (end > size - 1) {\n      end = size - 1\n    }\n\n    // invalid or unsatisifiable\n    if (isNaN(start) || isNaN(end) || start > end || start < 0) {\n      continue\n    }\n\n    // add range\n    ranges.push({\n      start: start,\n      end: end\n    })\n  }\n\n  if (ranges.length < 1) {\n    // unsatisifiable\n    return -1\n  }\n\n  return options && options.combine\n    ? combineRanges(ranges)\n    : ranges\n}\n\n/**\n * Combine overlapping & adjacent ranges.\n * @private\n */\n\nfunction combineRanges (ranges) {\n  var ordered = ranges.map(mapWithIndex).sort(sortByRangeStart)\n\n  for (var j = 0, i = 1; i < ordered.length; i++) {\n    var range = ordered[i]\n    var current = ordered[j]\n\n    if (range.start > current.end + 1) {\n      // next range\n      ordered[++j] = range\n    } else if (range.end > current.end) {\n      // extend range\n      current.end = range.end\n      current.index = Math.min(current.index, range.index)\n    }\n  }\n\n  // trim ordered array\n  ordered.length = j + 1\n\n  // generate combined range\n  var combined = ordered.sort(sortByRangeIndex).map(mapWithoutIndex)\n\n  // copy ranges type\n  combined.type = ranges.type\n\n  return combined\n}\n\n/**\n * Map function to add index value to ranges.\n * @private\n */\n\nfunction mapWithIndex (range, index) {\n  return {\n    start: range.start,\n    end: range.end,\n    index: index\n  }\n}\n\n/**\n * Map function to remove index value from ranges.\n * @private\n */\n\nfunction mapWithoutIndex (range) {\n  return {\n    start: range.start,\n    end: range.end\n  }\n}\n\n/**\n * Sort function to sort ranges by index.\n * @private\n */\n\nfunction sortByRangeIndex (a, b) {\n  return a.index - b.index\n}\n\n/**\n * Sort function to sort ranges by start position.\n * @private\n */\n\nfunction sortByRangeStart (a, b) {\n  return a.start - b.start\n}\n"]}