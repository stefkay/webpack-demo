{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;;;;;;;AAOA;;AAEA;;;;;AAKA,IAAI,QAAQ,QAAQ,cAAR,CAAZ;;AAEA;;;;;AAKA,OAAO,OAAP,GAAiB,MAAjB;;AAEA;AACA,OAAO,KAAP,GAAe,oBAAoB,MAApB,EAA4B,KAA5B,CAAf;;AAEA;AACA,OAAO,QAAP,GAAkB;AAChB,OAAK,IADW;AAEhB,OAAK,IAFW;AAGhB,OAAK,IAHW;AAIhB,OAAK,IAJW;AAKhB,OAAK,IALW;AAMhB,OAAK,IANW;AAOhB,OAAK;AAPW,CAAlB;;AAUA;AACA,OAAO,KAAP,GAAe;AACb,OAAK,IADQ;AAEb,OAAK,IAFQ;AAGb,OAAK;AAHQ,CAAf;;AAMA;AACA,OAAO,KAAP,GAAe;AACb,OAAK,IADQ;AAEb,OAAK,IAFQ;AAGb,OAAK;AAHQ,CAAf;;AAMA;;;;;AAKA,SAAS,mBAAT,CAA8B,QAA9B,EAAwC,KAAxC,EAA+C;AAC7C,MAAI,MAAM,EAAV;;AAEA,SAAO,IAAP,CAAY,KAAZ,EAAmB,OAAnB,CAA2B,SAAS,WAAT,CAAsB,IAAtB,EAA4B;AACrD,QAAI,UAAU,MAAM,IAAN,CAAd;AACA,QAAI,SAAS,OAAO,IAAP,CAAb;;AAEA;AACA,aAAS,MAAT,IAAmB,OAAnB;AACA,aAAS,OAAT,IAAoB,MAApB;AACA,aAAS,QAAQ,WAAR,EAAT,IAAkC,MAAlC;;AAEA;AACA,QAAI,IAAJ,CAAS,MAAT;AACD,GAXD;;AAaA,SAAO,GAAP;AACD;;AAED;;;;;;;;;;;;;;AAcA,SAAS,MAAT,CAAiB,IAAjB,EAAuB;AACrB,MAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC5B,QAAI,CAAC,OAAO,IAAP,CAAL,EAAmB,MAAM,IAAI,KAAJ,CAAU,0BAA0B,IAApC,CAAN;AACnB,WAAO,IAAP;AACD;;AAED,MAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAM,IAAI,SAAJ,CAAc,iCAAd,CAAN;AACD;;AAED;AACA,MAAI,IAAI,SAAS,IAAT,EAAe,EAAf,CAAR;AACA,MAAI,CAAC,MAAM,CAAN,CAAL,EAAe;AACb,QAAI,CAAC,OAAO,CAAP,CAAL,EAAgB,MAAM,IAAI,KAAJ,CAAU,0BAA0B,CAApC,CAAN;AAChB,WAAO,CAAP;AACD;;AAED,MAAI,OAAO,KAAK,WAAL,EAAP,CAAJ;AACA,MAAI,CAAC,CAAL,EAAQ,MAAM,IAAI,KAAJ,CAAU,8BAA8B,IAA9B,GAAqC,GAA/C,CAAN;AACR,SAAO,CAAP;AACD","file":"index-compiled.js","sourcesContent":["/*!\n * statuses\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar codes = require('./codes.json')\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = status\n\n// array of status codes\nstatus.codes = populateStatusesMap(status, codes)\n\n// status codes for redirects\nstatus.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true\n}\n\n// status codes for empty bodies\nstatus.empty = {\n  204: true,\n  205: true,\n  304: true\n}\n\n// status codes for when you should retry the request\nstatus.retry = {\n  502: true,\n  503: true,\n  504: true\n}\n\n/**\n * Populate the statuses map for given codes.\n * @private\n */\n\nfunction populateStatusesMap (statuses, codes) {\n  var arr = []\n\n  Object.keys(codes).forEach(function forEachCode (code) {\n    var message = codes[code]\n    var status = Number(code)\n\n    // Populate properties\n    statuses[status] = message\n    statuses[message] = status\n    statuses[message.toLowerCase()] = status\n\n    // Add to array\n    arr.push(status)\n  })\n\n  return arr\n}\n\n/**\n * Get the status code.\n *\n * Given a number, this will throw if it is not a known status\n * code, otherwise the code will be returned. Given a string,\n * the string will be parsed for a number and return the code\n * if valid, otherwise will lookup the code assuming this is\n * the status message.\n *\n * @param {string|number} code\n * @returns {string}\n * @public\n */\n\nfunction status (code) {\n  if (typeof code === 'number') {\n    if (!status[code]) throw new Error('invalid status code: ' + code)\n    return code\n  }\n\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string')\n  }\n\n  // '403'\n  var n = parseInt(code, 10)\n  if (!isNaN(n)) {\n    if (!status[n]) throw new Error('invalid status code: ' + n)\n    return n\n  }\n\n  n = status[code.toLowerCase()]\n  if (!n) throw new Error('invalid status message: \"' + code + '\"')\n  return n\n}\n"]}