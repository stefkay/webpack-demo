{"version":3,"sources":["test-with-child-processes.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,IAAR,CAAlB;AACA,IAAI,SAAc,QAAQ,QAAR,CAAlB;AACA,IAAI,QAAc,QAAQ,eAAR,EAAyB,KAA3C;;AAEA,IAAI,SAAS,MAAM,KAAN,CAAb;AACA,IAAI,QAAS,IAAI,WAAJ,EAAb;;AAEA,IAAI,QAAQ,EAAZ;AACA,IAAI,aAAa,EAAjB;AACA,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,OAAhB,CAAwB,UAAS,IAAT,EAAe;AACrC,MAAI,OAAe,MAAM,IAAN,IAAc,MAAM,KAAN,CAAjC;AACA,aAAW,IAAX,IAAmB,EAAnB;;AAEA,OAAK,MAAL,CAAY,WAAZ,CAAwB,OAAxB;AACA,OAAK,MAAL,CAAY,EAAZ,CAAe,MAAf,EAAuB,UAAS,KAAT,EAAgB;AACrC,eAAW,IAAX,EAAiB,IAAjB,CAAsB,KAAtB;AACD,GAFD;AAGD,CARD;;AAUA,MAAM,IAAN,CAAW,MAAM,CAAN,CAAQ,KAAnB;AACA,OAAO,MAAP,CAAc,IAAd,CAAmB,KAAnB;AACA,OAAO,KAAP,CAAa,KAAb,CAAmB,OAAnB;;AAEA,OAAO,MAAP,CAAc,IAAd,CAAmB,MAAnB,EAA2B,YAAW;AACpC,QAAM,IAAN,CAAW,MAAM,CAAN,CAAQ,KAAnB;;AAEA,SAAO,KAAP,CAAa,KAAb,CAAmB,OAAnB;AACA,SAAO,KAAP,CAAa,GAAb;AACD,CALD;;AAOA,OAAO,EAAP,CAAU,MAAV,EAAkB,YAAW;AAC3B,QAAM,IAAN,CAAW,MAAM,CAAN,CAAQ,KAAnB;AACD,CAFD;;AAIA,QAAQ,EAAR,CAAW,MAAX,EAAmB,YAAW;AAC5B,MAAI,WAAc,CAAC,OAAD,EAAU,OAAV,CAAlB;AACA,MAAI,cAAc,CAAC,YAAD,CAAlB;;AAEA,SAAO,SAAP,CAAiB,WAAW,CAA5B,EAA+B,QAA/B;;AAEA,MAAG;AACD,WAAO,SAAP,CAAiB,WAAW,CAA5B,EAA+B,QAA/B;AACD,GAFD,CAEE,OAAO,GAAP,EAAY;AACZ,WAAO,SAAP,CAAiB,WAAW,CAA5B,EAA+B,WAA/B;AACD;;AAED,MAAG;AACD,WAAO,SAAP,CAAiB,WAAW,CAA5B,EAA+B,QAA/B;AACD,GAFD,CAEE,OAAO,GAAP,EAAY;AACZ,WAAO,SAAP,CAAiB,WAAW,CAA5B,EAA+B,WAA/B;AACD;AACF,CAjBD","file":"test-with-child-processes-compiled.js","sourcesContent":["var StreamCache = require('..');\nvar assert      = require('assert');\nvar spawn       = require('child_process').spawn;\n\nvar source = spawn('cat');\nvar cache  = new StreamCache();\n\nvar dests = {};\nvar dataEvents = {};\n['a', 'b', 'c'].forEach(function(name) {\n  var dest         = dests[name] = spawn('cat');\n  dataEvents[name] = [];\n\n  dest.stdout.setEncoding('utf-8');\n  dest.stdout.on('data', function(chunk) {\n    dataEvents[name].push(chunk);\n  });\n});\n\ncache.pipe(dests.a.stdin);\nsource.stdout.pipe(cache);\nsource.stdin.write('Hello');\n\nsource.stdout.once('data', function() {\n  cache.pipe(dests.b.stdin);\n\n  source.stdin.write('World');\n  source.stdin.end();\n});\n\nsource.on('exit', function() {\n  cache.pipe(dests.c.stdin);\n});\n\nprocess.on('exit', function() {\n  var expected    = ['Hello', 'World'];\n  var alternative = ['HelloWorld'];\n\n  assert.deepEqual(dataEvents.a, expected);\n\n  try{\n    assert.deepEqual(dataEvents.b, expected);\n  } catch (err) {\n    assert.deepEqual(dataEvents.b, alternative);\n  }\n\n  try{\n    assert.deepEqual(dataEvents.c, expected);\n  } catch (err) {\n    assert.deepEqual(dataEvents.c, alternative);\n  }\n});\n"]}