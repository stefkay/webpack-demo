{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\nvar extname = require('path').extname\n\n/**\n * Module variables.\n * @private\n */\n\nvar extractTypeRegExp = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nvar textTypeRegExp = /^text\\//i\n\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset\nexports.charsets = { lookup: charset }\nexports.contentType = contentType\nexports.extension = extension\nexports.extensions = Object.create(null)\nexports.lookup = lookup\nexports.types = Object.create(null)\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types)\n\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset(type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = extractTypeRegExp.exec(type)\n  var mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime.charset) {\n    return mime.charset\n  }\n\n  // default text/* to utf-8\n  if (match && textTypeRegExp.test(match[1])) {\n    return 'UTF-8'\n  }\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\nfunction contentType(str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false\n  }\n\n  var mime = str.indexOf('/') === -1\n    ? exports.lookup(str)\n    : str\n\n  if (!mime) {\n    return false\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime)\n    if (charset) mime += '; charset=' + charset.toLowerCase()\n  }\n\n  return mime\n}\n\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction extension(type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = extractTypeRegExp.exec(type)\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) {\n    return false\n  }\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\nfunction lookup(path) {\n  if (!path || typeof path !== 'string') {\n    return false\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path)\n    .toLowerCase()\n    .substr(1)\n\n  if (!extension) {\n    return false\n  }\n\n  return exports.types[extension] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\nfunction populateMaps(extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana']\n\n  Object.keys(db).forEach(function forEachMimeType(type) {\n    var mime = db[type]\n    var exts = mime.extensions\n\n    if (!exts || !exts.length) {\n      return\n    }\n\n    // mime -> extensions\n    extensions[type] = exts\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i]\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source)\n        var to = preference.indexOf(mime.source)\n\n        if (types[extension] !== 'application/octet-stream'\n          && from > to || (from === to && types[extension].substr(0, 12) === 'application/')) {\n          // skip the remapping\n          continue\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type\n    }\n  })\n}\n"]}