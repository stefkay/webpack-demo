{"version":3,"sources":["server.js"],"names":[],"mappings":"AAAA,IAAI,UAAsB,QAAQ,SAAR,CAA1B;AACA,IAAI,SAAsB,QAAQ,QAAR,CAA1B;;AAEA,IAAI,sBAAsB,QAAQ,qBAAR,CAA1B;;AAGA;AACA,IAAI,cAAc,EAAC,YAAY,oDAAb,EAAlB;AACA,IAAI,UAAU,OAAO,YAAP,CAAoB,WAApB,CAAd;;AAGA;AACA,IAAI,cAAc,IAAI,oBAAoB,eAAxB,CAAwC,OAAxC,CAAlB;;AAEA,IAAI,MAAM,YAAY,eAAZ,CAA4B,KAA5B,CAAV;AACA,IAAI,EAAJ,CAAO,YAAP,EAAqB,UAAS,IAAT,EAAe;AAChC,SAAK,KAAL,CAAW,cAAX;AACA,SAAK,EAAL,CAAQ,MAAR,EAAgB,UAAS,IAAT,EAAe;AAC3B,aAAK,KAAL,CAAW,eAAe,IAA1B;AACH,KAFD;AAGH,CALD;;AAOA,IAAI,MAAM,YAAY,eAAZ,CAA4B,KAA5B,CAAV;AACA,IAAI,EAAJ,CAAO,YAAP,EAAqB,UAAS,IAAT,EAAe;AAChC,SAAK,KAAL,CAAW,qBAAX;AACA,SAAK,EAAL,CAAQ,MAAR,EAAgB,UAAS,IAAT,EAAe;AAC3B,aAAK,KAAL,CAAW,qBAAqB,IAAhC;AACH,KAFD;AAGH,CALD;;AAOA,IAAI,OAAO,YAAY,eAAZ,CAA4B,MAA5B,CAAX;AACA,KAAK,EAAL,CAAQ,YAAR,EAAsB,UAAS,IAAT,EAAe;AACjC,SAAK,KAAL,CAAW,oBAAX;AACA;AACA,SAAK,GAAL;AACH,CAJD;;AAOA;AACA,IAAI,MAAM,QAAQ,YAAR,EAAV;AACA,QAAQ,eAAR,CAAwB,GAAxB,EAA6B,EAAC,QAAO,YAAR,EAA7B;;AAEA,QAAQ,GAAR,CAAY,gCAAZ;AACA,IAAI,MAAJ,CAAW,IAAX,EAAiB,SAAjB;;AAEA,IAAI,GAAJ,CAAQ,GAAR,EAAa,UAAU,GAAV,EAAe,GAAf,EAAoB;AAC7B,QAAI,QAAJ,CAAa,YAAY,aAAzB;AACH,CAFD;;AAIA,IAAI,GAAJ,CAAQ,eAAR,EAAyB,UAAU,GAAV,EAAe,GAAf,EAAoB;AACzC,QAAI,QAAJ,CAAa,YAAY,eAAzB;AACH,CAFD","file":"server-compiled.js","sourcesContent":["var express             = require('express');\nvar sockjs              = require('sockjs');\n\nvar websocket_multiplex = require('websocket-multiplex');\n\n\n// 1. Setup SockJS server\nvar sockjs_opts = {sockjs_url: \"http://cdn.jsdelivr.net/sockjs/1.0.1/sockjs.min.js\"};\nvar service = sockjs.createServer(sockjs_opts);\n\n\n// 2. Setup multiplexing\nvar multiplexer = new websocket_multiplex.MultiplexServer(service);\n\nvar ann = multiplexer.registerChannel('ann');\nann.on('connection', function(conn) {\n    conn.write('Ann says hi!');\n    conn.on('data', function(data) {\n        conn.write('Ann nods: ' + data);\n    });\n});\n\nvar bob = multiplexer.registerChannel('bob');\nbob.on('connection', function(conn) {\n    conn.write('Bob doesn\\'t agree.');\n    conn.on('data', function(data) {\n        conn.write('Bob says no to: ' + data);\n    });\n});\n\nvar carl = multiplexer.registerChannel('carl');\ncarl.on('connection', function(conn) {\n    conn.write('Carl says goodbye!');\n    // Explicitly cancel connection\n    conn.end();\n});\n\n\n// 3. Express server\nvar app = express.createServer();\nservice.installHandlers(app, {prefix:'/multiplex'});\n\nconsole.log(' [*] Listening on 0.0.0.0:9999' );\napp.listen(9999, '0.0.0.0');\n\napp.get('/', function (req, res) {\n    res.sendfile(__dirname + '/index.html');\n});\n\napp.get('/multiplex.js', function (req, res) {\n    res.sendfile(__dirname + '/multiplex.js');\n});\n"]}