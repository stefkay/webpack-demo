{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/*!\n * media-typer\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * RegExp to match *( \";\" parameter ) in RFC 2616 sec 3.7\n *\n * parameter     = token \"=\" ( token | quoted-string )\n * token         = 1*<any CHAR except CTLs or separators>\n * separators    = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n *               | \",\" | \";\" | \":\" | \"\\\" | <\">\n *               | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n *               | \"{\" | \"}\" | SP | HT\n * quoted-string = ( <\"> *(qdtext | quoted-pair ) <\"> )\n * qdtext        = <any TEXT except <\">>\n * quoted-pair   = \"\\\" CHAR\n * CHAR          = <any US-ASCII character (octets 0 - 127)>\n * TEXT          = <any OCTET except CTLs, but including LWS>\n * LWS           = [CRLF] 1*( SP | HT )\n * CRLF          = CR LF\n * CR            = <US-ASCII CR, carriage return (13)>\n * LF            = <US-ASCII LF, linefeed (10)>\n * SP            = <US-ASCII SP, space (32)>\n * SHT           = <US-ASCII HT, horizontal-tab (9)>\n * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>\n * OCTET         = <any 8-bit sequence of data>\n */\nvar paramRegExp = /; *([!#$%&'\\*\\+\\-\\.0-9A-Z\\^_`a-z\\|~]+) *= *(\"(?:[ !\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\u0020-\\u007e])*\"|[!#$%&'\\*\\+\\-\\.0-9A-Z\\^_`a-z\\|~]+) */g;\nvar textRegExp = /^[\\u0020-\\u007e\\u0080-\\u00ff]+$/\nvar tokenRegExp = /^[!#$%&'\\*\\+\\-\\.0-9A-Z\\^_`a-z\\|~]+$/\n\n/**\n * RegExp to match quoted-pair in RFC 2616\n *\n * quoted-pair = \"\\\" CHAR\n * CHAR        = <any US-ASCII character (octets 0 - 127)>\n */\nvar qescRegExp = /\\\\([\\u0000-\\u007f])/g;\n\n/**\n * RegExp to match chars that must be quoted-pair in RFC 2616\n */\nvar quoteRegExp = /([\\\\\"])/g;\n\n/**\n * RegExp to match type in RFC 6838\n *\n * type-name = restricted-name\n * subtype-name = restricted-name\n * restricted-name = restricted-name-first *126restricted-name-chars\n * restricted-name-first  = ALPHA / DIGIT\n * restricted-name-chars  = ALPHA / DIGIT / \"!\" / \"#\" /\n *                          \"$\" / \"&\" / \"-\" / \"^\" / \"_\"\n * restricted-name-chars =/ \".\" ; Characters before first dot always\n *                              ; specify a facet name\n * restricted-name-chars =/ \"+\" ; Characters after last plus always\n *                              ; specify a structured syntax suffix\n * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z\n * DIGIT =  %x30-39             ; 0-9\n */\nvar subtypeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/\nvar typeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/\nvar typeRegExp = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;\n\n/**\n * Module exports.\n */\n\nexports.format = format\nexports.parse = parse\n\n/**\n * Format object to media type.\n *\n * @param {object} obj\n * @return {string}\n * @api public\n */\n\nfunction format(obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('argument obj is required')\n  }\n\n  var parameters = obj.parameters\n  var subtype = obj.subtype\n  var suffix = obj.suffix\n  var type = obj.type\n\n  if (!type || !typeNameRegExp.test(type)) {\n    throw new TypeError('invalid type')\n  }\n\n  if (!subtype || !subtypeNameRegExp.test(subtype)) {\n    throw new TypeError('invalid subtype')\n  }\n\n  // format as type/subtype\n  var string = type + '/' + subtype\n\n  // append +suffix\n  if (suffix) {\n    if (!typeNameRegExp.test(suffix)) {\n      throw new TypeError('invalid suffix')\n    }\n\n    string += '+' + suffix\n  }\n\n  // append parameters\n  if (parameters && typeof parameters === 'object') {\n    var param\n    var params = Object.keys(parameters).sort()\n\n    for (var i = 0; i < params.length; i++) {\n      param = params[i]\n\n      if (!tokenRegExp.test(param)) {\n        throw new TypeError('invalid parameter name')\n      }\n\n      string += '; ' + param + '=' + qstring(parameters[param])\n    }\n  }\n\n  return string\n}\n\n/**\n * Parse media type to object.\n *\n * @param {string|object} string\n * @return {Object}\n * @api public\n */\n\nfunction parse(string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  // support req/res-like objects as argument\n  if (typeof string === 'object') {\n    string = getcontenttype(string)\n  }\n\n  if (typeof string !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  var index = string.indexOf(';')\n  var type = index !== -1\n    ? string.substr(0, index)\n    : string\n\n  var key\n  var match\n  var obj = splitType(type)\n  var params = {}\n  var value\n\n  paramRegExp.lastIndex = index\n\n  while (match = paramRegExp.exec(string)) {\n    if (match.index !== index) {\n      throw new TypeError('invalid parameter format')\n    }\n\n    index += match[0].length\n    key = match[1].toLowerCase()\n    value = match[2]\n\n    if (value[0] === '\"') {\n      // remove quotes and escapes\n      value = value\n        .substr(1, value.length - 2)\n        .replace(qescRegExp, '$1')\n    }\n\n    params[key] = value\n  }\n\n  if (index !== -1 && index !== string.length) {\n    throw new TypeError('invalid parameter format')\n  }\n\n  obj.parameters = params\n\n  return obj\n}\n\n/**\n * Get content-type from req/res objects.\n *\n * @param {object}\n * @return {Object}\n * @api private\n */\n\nfunction getcontenttype(obj) {\n  if (typeof obj.getHeader === 'function') {\n    // res-like\n    return obj.getHeader('content-type')\n  }\n\n  if (typeof obj.headers === 'object') {\n    // req-like\n    return obj.headers && obj.headers['content-type']\n  }\n}\n\n/**\n * Quote a string if necessary.\n *\n * @param {string} val\n * @return {string}\n * @api private\n */\n\nfunction qstring(val) {\n  var str = String(val)\n\n  // no need to quote tokens\n  if (tokenRegExp.test(str)) {\n    return str\n  }\n\n  if (str.length > 0 && !textRegExp.test(str)) {\n    throw new TypeError('invalid parameter value')\n  }\n\n  return '\"' + str.replace(quoteRegExp, '\\\\$1') + '\"'\n}\n\n/**\n * Simply \"type/subtype+siffx\" into parts.\n *\n * @param {string} string\n * @return {Object}\n * @api private\n */\n\nfunction splitType(string) {\n  var match = typeRegExp.exec(string.toLowerCase())\n\n  if (!match) {\n    throw new TypeError('invalid media type')\n  }\n\n  var type = match[1]\n  var subtype = match[2]\n  var suffix\n\n  // suffix after last +\n  var index = subtype.lastIndexOf('+')\n  if (index !== -1) {\n    suffix = subtype.substr(index + 1)\n    subtype = subtype.substr(0, index)\n  }\n\n  var obj = {\n    type: type,\n    subtype: subtype,\n    suffix: suffix\n  }\n\n  return obj\n}\n"]}