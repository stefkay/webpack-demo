{"version":3,"sources":["encoding.js"],"names":[],"mappings":"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","file":"encoding-compiled.js","sourcesContent":["/**\n * negotiator\n * Copyright(c) 2012 Isaac Z. Schlueter\n * Copyright(c) 2014 Federico Romero\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = preferredEncodings;\nmodule.exports.preferredEncodings = preferredEncodings;\n\n/**\n * Module variables.\n * @private\n */\n\nvar simpleEncodingRegExp = /^\\s*([^\\s;]+)\\s*(?:;(.*))?$/;\n\n/**\n * Parse the Accept-Encoding header.\n * @private\n */\n\nfunction parseAcceptEncoding(accept) {\n  var accepts = accept.split(',');\n  var hasIdentity = false;\n  var minQuality = 1;\n\n  for (var i = 0, j = 0; i < accepts.length; i++) {\n    var encoding = parseEncoding(accepts[i].trim(), i);\n\n    if (encoding) {\n      accepts[j++] = encoding;\n      hasIdentity = hasIdentity || specify('identity', encoding);\n      minQuality = Math.min(minQuality, encoding.q || 1);\n    }\n  }\n\n  if (!hasIdentity) {\n    /*\n     * If identity doesn't explicitly appear in the accept-encoding header,\n     * it's added to the list of acceptable encoding with the lowest q\n     */\n    accepts[j++] = {\n      encoding: 'identity',\n      q: minQuality,\n      i: i\n    };\n  }\n\n  // trim accepts\n  accepts.length = j;\n\n  return accepts;\n}\n\n/**\n * Parse an encoding from the Accept-Encoding header.\n * @private\n */\n\nfunction parseEncoding(str, i) {\n  var match = simpleEncodingRegExp.exec(str);\n  if (!match) return null;\n\n  var encoding = match[1];\n  var q = 1;\n  if (match[2]) {\n    var params = match[2].split(';');\n    for (var i = 0; i < params.length; i ++) {\n      var p = params[i].trim().split('=');\n      if (p[0] === 'q') {\n        q = parseFloat(p[1]);\n        break;\n      }\n    }\n  }\n\n  return {\n    encoding: encoding,\n    q: q,\n    i: i\n  };\n}\n\n/**\n * Get the priority of an encoding.\n * @private\n */\n\nfunction getEncodingPriority(encoding, accepted, index) {\n  var priority = {o: -1, q: 0, s: 0};\n\n  for (var i = 0; i < accepted.length; i++) {\n    var spec = specify(encoding, accepted[i], index);\n\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n      priority = spec;\n    }\n  }\n\n  return priority;\n}\n\n/**\n * Get the specificity of the encoding.\n * @private\n */\n\nfunction specify(encoding, spec, index) {\n  var s = 0;\n  if(spec.encoding.toLowerCase() === encoding.toLowerCase()){\n    s |= 1;\n  } else if (spec.encoding !== '*' ) {\n    return null\n  }\n\n  return {\n    i: index,\n    o: spec.i,\n    q: spec.q,\n    s: s\n  }\n};\n\n/**\n * Get the preferred encodings from an Accept-Encoding header.\n * @public\n */\n\nfunction preferredEncodings(accept, provided) {\n  var accepts = parseAcceptEncoding(accept || '');\n\n  if (!provided) {\n    // sorted list of all encodings\n    return accepts\n      .filter(isQuality)\n      .sort(compareSpecs)\n      .map(getFullEncoding);\n  }\n\n  var priorities = provided.map(function getPriority(type, index) {\n    return getEncodingPriority(type, accepts, index);\n  });\n\n  // sorted list of accepted encodings\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority) {\n    return provided[priorities.indexOf(priority)];\n  });\n}\n\n/**\n * Compare two specs.\n * @private\n */\n\nfunction compareSpecs(a, b) {\n  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;\n}\n\n/**\n * Get full encoding string.\n * @private\n */\n\nfunction getFullEncoding(spec) {\n  return spec.encoding;\n}\n\n/**\n * Check if a spec has any quality.\n * @private\n */\n\nfunction isQuality(spec) {\n  return spec.q > 0;\n}\n"]}