{"version":3,"sources":["mediaType.js"],"names":[],"mappings":"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","file":"mediaType-compiled.js","sourcesContent":["/**\n * negotiator\n * Copyright(c) 2012 Isaac Z. Schlueter\n * Copyright(c) 2014 Federico Romero\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = preferredMediaTypes;\nmodule.exports.preferredMediaTypes = preferredMediaTypes;\n\n/**\n * Module variables.\n * @private\n */\n\nvar simpleMediaTypeRegExp = /^\\s*([^\\s\\/;]+)\\/([^;\\s]+)\\s*(?:;(.*))?$/;\n\n/**\n * Parse the Accept header.\n * @private\n */\n\nfunction parseAccept(accept) {\n  var accepts = splitMediaTypes(accept);\n\n  for (var i = 0, j = 0; i < accepts.length; i++) {\n    var mediaType = parseMediaType(accepts[i].trim(), i);\n\n    if (mediaType) {\n      accepts[j++] = mediaType;\n    }\n  }\n\n  // trim accepts\n  accepts.length = j;\n\n  return accepts;\n}\n\n/**\n * Parse a media type from the Accept header.\n * @private\n */\n\nfunction parseMediaType(str, i) {\n  var match = simpleMediaTypeRegExp.exec(str);\n  if (!match) return null;\n\n  var params = Object.create(null);\n  var q = 1;\n  var subtype = match[2];\n  var type = match[1];\n\n  if (match[3]) {\n    var kvps = splitParameters(match[3]).map(splitKeyValuePair);\n\n    for (var j = 0; j < kvps.length; j++) {\n      var pair = kvps[j];\n      var key = pair[0].toLowerCase();\n      var val = pair[1];\n\n      // get the value, unwrapping quotes\n      var value = val && val[0] === '\"' && val[val.length - 1] === '\"'\n        ? val.substr(1, val.length - 2)\n        : val;\n\n      if (key === 'q') {\n        q = parseFloat(value);\n        break;\n      }\n\n      // store parameter\n      params[key] = value;\n    }\n  }\n\n  return {\n    type: type,\n    subtype: subtype,\n    params: params,\n    q: q,\n    i: i\n  };\n}\n\n/**\n * Get the priority of a media type.\n * @private\n */\n\nfunction getMediaTypePriority(type, accepted, index) {\n  var priority = {o: -1, q: 0, s: 0};\n\n  for (var i = 0; i < accepted.length; i++) {\n    var spec = specify(type, accepted[i], index);\n\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n      priority = spec;\n    }\n  }\n\n  return priority;\n}\n\n/**\n * Get the specificity of the media type.\n * @private\n */\n\nfunction specify(type, spec, index) {\n  var p = parseMediaType(type);\n  var s = 0;\n\n  if (!p) {\n    return null;\n  }\n\n  if(spec.type.toLowerCase() == p.type.toLowerCase()) {\n    s |= 4\n  } else if(spec.type != '*') {\n    return null;\n  }\n\n  if(spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {\n    s |= 2\n  } else if(spec.subtype != '*') {\n    return null;\n  }\n\n  var keys = Object.keys(spec.params);\n  if (keys.length > 0) {\n    if (keys.every(function (k) {\n      return spec.params[k] == '*' || (spec.params[k] || '').toLowerCase() == (p.params[k] || '').toLowerCase();\n    })) {\n      s |= 1\n    } else {\n      return null\n    }\n  }\n\n  return {\n    i: index,\n    o: spec.i,\n    q: spec.q,\n    s: s,\n  }\n}\n\n/**\n * Get the preferred media types from an Accept header.\n * @public\n */\n\nfunction preferredMediaTypes(accept, provided) {\n  // RFC 2616 sec 14.2: no header = */*\n  var accepts = parseAccept(accept === undefined ? '*/*' : accept || '');\n\n  if (!provided) {\n    // sorted list of all types\n    return accepts\n      .filter(isQuality)\n      .sort(compareSpecs)\n      .map(getFullType);\n  }\n\n  var priorities = provided.map(function getPriority(type, index) {\n    return getMediaTypePriority(type, accepts, index);\n  });\n\n  // sorted list of accepted types\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {\n    return provided[priorities.indexOf(priority)];\n  });\n}\n\n/**\n * Compare two specs.\n * @private\n */\n\nfunction compareSpecs(a, b) {\n  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;\n}\n\n/**\n * Get full type string.\n * @private\n */\n\nfunction getFullType(spec) {\n  return spec.type + '/' + spec.subtype;\n}\n\n/**\n * Check if a spec has any quality.\n * @private\n */\n\nfunction isQuality(spec) {\n  return spec.q > 0;\n}\n\n/**\n * Count the number of quotes in a string.\n * @private\n */\n\nfunction quoteCount(string) {\n  var count = 0;\n  var index = 0;\n\n  while ((index = string.indexOf('\"', index)) !== -1) {\n    count++;\n    index++;\n  }\n\n  return count;\n}\n\n/**\n * Split a key value pair.\n * @private\n */\n\nfunction splitKeyValuePair(str) {\n  var index = str.indexOf('=');\n  var key;\n  var val;\n\n  if (index === -1) {\n    key = str;\n  } else {\n    key = str.substr(0, index);\n    val = str.substr(index + 1);\n  }\n\n  return [key, val];\n}\n\n/**\n * Split an Accept header into media types.\n * @private\n */\n\nfunction splitMediaTypes(accept) {\n  var accepts = accept.split(',');\n\n  for (var i = 1, j = 0; i < accepts.length; i++) {\n    if (quoteCount(accepts[j]) % 2 == 0) {\n      accepts[++j] = accepts[i];\n    } else {\n      accepts[j] += ',' + accepts[i];\n    }\n  }\n\n  // trim accepts\n  accepts.length = j + 1;\n\n  return accepts;\n}\n\n/**\n * Split a string of parameters.\n * @private\n */\n\nfunction splitParameters(str) {\n  var parameters = str.split(';');\n\n  for (var i = 1, j = 0; i < parameters.length; i++) {\n    if (quoteCount(parameters[j]) % 2 == 0) {\n      parameters[++j] = parameters[i];\n    } else {\n      parameters[j] += ';' + parameters[i];\n    }\n  }\n\n  // trim parameters\n  parameters.length = j + 1;\n\n  for (var i = 0; i < parameters.length; i++) {\n    parameters[i] = parameters[i].trim();\n  }\n\n  return parameters;\n}\n"]}