{"version":3,"sources":["test.js"],"names":[],"mappings":"AAAA,SAAS,gBAAT,EAA2B,YAAY;AACrC;;AAEA,MAAI,SAAS,QAAQ,QAAR,CAAb;AAAA,MACI,KAAK,QAAQ,IAAR,CADT;;AAGA,WAAS,YAAT,EAAuB,YAAY;AACjC,QAAI,MAAM;AACR,WAAK,KADG;AAER,WAAK;AAFG,KAAV;;AAKA,OAAG,sBAAH,EAA2B,YAAY;AACrC,aAAO,GAAG,SAAV,EAAqB,EAArB,CAAwB,CAAxB,CAA0B,UAA1B;AACD,KAFD;;AAIA,OAAG,sBAAH,EAA2B,YAAY;AACrC,aAAO,GAAG,SAAH,CAAa,GAAb,CAAP,EAA0B,MAA1B,CAAiC,iBAAjC;AACD,KAFD;;AAIA,OAAG,uBAAH,EAA4B,YAAY;AACtC,aAAO,GAAG,SAAH,CAAa,GAAb,EAAkB,IAAlB,CAAP,EAAgC,MAAhC,CAAuC,kBAAvC;AACD,KAFD;;AAIA,OAAG,+BAAH,EAAoC,YAAY;AAC9C,aAAO,GAAG,SAAH,CAAa,GAAb,EAAkB,GAAlB,CAAP,EAA+B,MAA/B,CAAsC,kBAAtC;AACD,KAFD;;AAIA,OAAG,mCAAH,EAAwC,YAAY;AAClD,aAAO,GAAG,SAAH,CAAa,EAAb,EAAiB,IAAjB,CAAP,EAA+B,MAA/B,CAAsC,EAAtC;AACA,aAAO,GAAG,SAAH,CAAa,EAAb,CAAP,EAAyB,MAAzB,CAAgC,EAAhC;AACD,KAHD;;AAKA,OAAG,2BAAH,EAAgC,YAAY;AAC1C,UAAI,MAAM,OAAO,MAAP,CAAc,IAAd,CAAV;;AAEA,UAAI,GAAJ,GAAQ,KAAR;AACA,aAAO,GAAG,SAAH,CAAa,GAAb,CAAP,EAA0B,MAA1B,CAAiC,SAAjC;AACD,KALD;AAMD,GAjCD;;AAmCA,WAAS,QAAT,EAAmB,YAAY;AAC7B,OAAG,sBAAH,EAA2B,YAAY;AACrC,aAAO,GAAG,KAAV,EAAiB,EAAjB,CAAoB,CAApB,CAAsB,UAAtB;AACD,KAFD;;AAIA,OAAG,uCAAH,EAA4C,YAAY;AACtD,UAAI,MAAM,GAAG,KAAH,CAAS,SAAT,CAAV;;AAEA,aAAO,GAAP,EAAY,EAAZ,CAAe,CAAf,CAAiB,QAAjB;AACA,aAAO,IAAI,GAAX,EAAgB,MAAhB,CAAuB,KAAvB;AACD,KALD;;AAOA,OAAG,kDAAH,EAAuD,YAAY;AACjE,UAAI,MAAM,GAAG,KAAH,CAAS,2BAAT,CAAV;;AAEA,aAAO,GAAP,EAAY,EAAZ,CAAe,CAAf,CAAiB,QAAjB;AACA,aAAO,IAAI,GAAX,EAAgB,MAAhB,CAAuB,KAAvB;AACA,aAAO,IAAI,OAAX,EAAoB,MAApB,CAA2B,UAA3B;AACD,KAND;AAOD,GAnBD;AAoBD,CA7DD","file":"test-compiled.js","sourcesContent":["describe('querystringify', function () {\n  'use strict';\n\n  var assume = require('assume')\n    , qs = require('./');\n\n  describe('#stringify', function () {\n    var obj = {\n      foo: 'bar',\n      bar: 'foo'\n    };\n\n    it('is exposed as method', function () {\n      assume(qs.stringify).is.a('function');\n    });\n\n    it('transforms an object', function () {\n      assume(qs.stringify(obj)).equals('foo=bar&bar=foo');\n    });\n\n    it('can optionally prefix', function () {\n      assume(qs.stringify(obj, true)).equals('?foo=bar&bar=foo');\n    });\n\n    it('can prefix with custom things', function () {\n      assume(qs.stringify(obj, '&')).equals('&foo=bar&bar=foo');\n    });\n\n    it('doesnt prefix empty query strings', function () {\n      assume(qs.stringify({}, true)).equals('');\n      assume(qs.stringify({})).equals('');\n    });\n\n    it('works with nulled objects', function () {\n      var obj = Object.create(null);\n\n      obj.foo='bar';\n      assume(qs.stringify(obj)).equals('foo=bar');\n    });\n  });\n\n  describe('#parse', function () {\n    it('is exposed as method', function () {\n      assume(qs.parse).is.a('function');\n    });\n\n    it('will parse a querystring to an object', function () {\n      var obj = qs.parse('foo=bar');\n\n      assume(obj).is.a('object');\n      assume(obj.foo).equals('bar');\n    });\n\n    it('will also work if querystring is prefixed with ?', function () {\n      var obj = qs.parse('?foo=bar&shizzle=mynizzle');\n\n      assume(obj).is.a('object');\n      assume(obj.foo).equals('bar');\n      assume(obj.shizzle).equals('mynizzle');\n    });\n  });\n});\n"]}