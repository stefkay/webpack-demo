{"version":3,"sources":["callsite-tostring.js"],"names":[],"mappings":"AAAA;;;;;;AAMA;;AAEA;;;;AAIA,OAAO,OAAP,GAAiB,gBAAjB;;AAEA;;;;AAIA,SAAS,oBAAT,CAA8B,QAA9B,EAAwC;AACtC,MAAI,QAAJ;AACA,MAAI,eAAe,EAAnB;;AAEA,MAAI,SAAS,QAAT,EAAJ,EAAyB;AACvB,mBAAe,QAAf;AACD,GAFD,MAEO,IAAI,SAAS,MAAT,EAAJ,EAAuB;AAC5B,eAAW,SAAS,wBAAT,EAAX;AACA,QAAI,CAAC,QAAL,EAAe;AACb,qBAAe,SAAS,aAAT,EAAf;AACD;AACF,GALM,MAKA;AACL,eAAW,SAAS,WAAT,EAAX;AACD;;AAED,MAAI,QAAJ,EAAc;AACZ,oBAAgB,QAAhB;;AAEA,QAAI,aAAa,SAAS,aAAT,EAAjB;AACA,QAAI,cAAc,IAAlB,EAAwB;AACtB,sBAAgB,MAAM,UAAtB;;AAEA,UAAI,eAAe,SAAS,eAAT,EAAnB;AACA,UAAI,YAAJ,EAAkB;AAChB,wBAAgB,MAAM,YAAtB;AACD;AACF;AACF;;AAED,SAAO,gBAAgB,gBAAvB;AACD;;AAED;;;;AAIA,SAAS,gBAAT,CAA0B,QAA1B,EAAoC;AAClC,MAAI,YAAY,IAAhB;AACA,MAAI,eAAe,qBAAqB,QAArB,CAAnB;AACA,MAAI,eAAe,SAAS,eAAT,EAAnB;AACA,MAAI,gBAAgB,SAAS,aAAT,EAApB;AACA,MAAI,eAAe,EAAE,SAAS,UAAT,MAAyB,aAA3B,CAAnB;AACA,MAAI,OAAO,EAAX;;AAEA,MAAI,YAAJ,EAAkB;AAChB,QAAI,aAAa,SAAS,aAAT,EAAjB;AACA,QAAI,WAAW,mBAAmB,QAAnB,CAAf;;AAEA,QAAI,YAAJ,EAAkB;AAChB,UAAI,YAAY,aAAa,OAAb,CAAqB,QAArB,MAAmC,CAAnD,EAAsD;AACpD,gBAAQ,WAAW,GAAnB;AACD;;AAED,cAAQ,YAAR;;AAEA,UAAI,cAAc,aAAa,WAAb,CAAyB,MAAM,UAA/B,MAA+C,aAAa,MAAb,GAAsB,WAAW,MAAjC,GAA0C,CAA3G,EAA8G;AAC5G,gBAAQ,UAAU,UAAV,GAAuB,GAA/B;AACD;AACF,KAVD,MAUO;AACL,cAAQ,WAAW,GAAX,IAAkB,cAAc,aAAhC,CAAR;AACD;AACF,GAjBD,MAiBO,IAAI,aAAJ,EAAmB;AACxB,YAAQ,UAAU,gBAAgB,aAA1B,CAAR;AACD,GAFM,MAEA,IAAI,YAAJ,EAAkB;AACvB,YAAQ,YAAR;AACD,GAFM,MAEA;AACL,gBAAY,KAAZ;AACA,YAAQ,YAAR;AACD;;AAED,MAAI,SAAJ,EAAe;AACb,YAAQ,OAAO,YAAP,GAAsB,GAA9B;AACD;;AAED,SAAO,IAAP;AACD;;AAED;;;;AAIA,SAAS,kBAAT,CAA4B,GAA5B,EAAiC;AAC/B,MAAI,WAAW,IAAI,QAAnB;AACA,SAAQ,SAAS,WAAT,IAAwB,SAAS,WAAT,CAAqB,IAA9C,IAAuD,IAA9D;AACD","file":"callsite-tostring-compiled.js","sourcesContent":["/*!\n * depd\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n */\n\nmodule.exports = callSiteToString\n\n/**\n * Format a CallSite file location to a string.\n */\n\nfunction callSiteFileLocation(callSite) {\n  var fileName\n  var fileLocation = ''\n\n  if (callSite.isNative()) {\n    fileLocation = 'native'\n  } else if (callSite.isEval()) {\n    fileName = callSite.getScriptNameOrSourceURL()\n    if (!fileName) {\n      fileLocation = callSite.getEvalOrigin()\n    }\n  } else {\n    fileName = callSite.getFileName()\n  }\n\n  if (fileName) {\n    fileLocation += fileName\n\n    var lineNumber = callSite.getLineNumber()\n    if (lineNumber != null) {\n      fileLocation += ':' + lineNumber\n\n      var columnNumber = callSite.getColumnNumber()\n      if (columnNumber) {\n        fileLocation += ':' + columnNumber\n      }\n    }\n  }\n\n  return fileLocation || 'unknown source'\n}\n\n/**\n * Format a CallSite to a string.\n */\n\nfunction callSiteToString(callSite) {\n  var addSuffix = true\n  var fileLocation = callSiteFileLocation(callSite)\n  var functionName = callSite.getFunctionName()\n  var isConstructor = callSite.isConstructor()\n  var isMethodCall = !(callSite.isToplevel() || isConstructor)\n  var line = ''\n\n  if (isMethodCall) {\n    var methodName = callSite.getMethodName()\n    var typeName = getConstructorName(callSite)\n\n    if (functionName) {\n      if (typeName && functionName.indexOf(typeName) !== 0) {\n        line += typeName + '.'\n      }\n\n      line += functionName\n\n      if (methodName && functionName.lastIndexOf('.' + methodName) !== functionName.length - methodName.length - 1) {\n        line += ' [as ' + methodName + ']'\n      }\n    } else {\n      line += typeName + '.' + (methodName || '<anonymous>')\n    }\n  } else if (isConstructor) {\n    line += 'new ' + (functionName || '<anonymous>')\n  } else if (functionName) {\n    line += functionName\n  } else {\n    addSuffix = false\n    line += fileLocation\n  }\n\n  if (addSuffix) {\n    line += ' (' + fileLocation + ')'\n  }\n\n  return line\n}\n\n/**\n * Get constructor name of reviver.\n */\n\nfunction getConstructorName(obj) {\n  var receiver = obj.receiver\n  return (receiver.constructor && receiver.constructor.name) || null\n}\n"]}